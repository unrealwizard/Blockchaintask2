// SPDX-License-Identifier: MIT
pragma solidity >=0.5.0 <0.9.0;

contract voting {
    uint256 public startTime;
    uint256 public endTime;

    struct Voter {
        bool isRegistered;
        bool hasVoted;
        uint256 vote;
    }
    mapping(address => Voter) public voters;

    struct Candidate {
        string name;
        uint256 voteCount;
    }
    Candidate[] public candidates;

    constructor(uint256 votingDuration) public {
        startTime = block.timestamp;
        endTime = block.timestamp + (votingDuration * 1 minutes);
    }

    function registerVoter(address voterAddress) public {
        require(!voters[voterAddress].isRegistered, "Voter is already registered");
        voters[voterAddress].isRegistered = true;
    }

    function addCandidate(string memory name) public {
        candidates.push(Candidate({name: name, voteCount: 0}));
    }

    function castVote(uint256 candidateIndex) public {
        require(block.timestamp >= startTime, "Voting time has not yet begun");
        require(block.timestamp <= endTime, "Voting time is over");
        require(voters[msg.sender].isRegistered, "You have not registered for voting");
        require(!voters[msg.sender].hasVoted, "You have already voted");
        require(candidateIndex < candidates.length, "candidate not in the list");

        voters[msg.sender].hasVoted = true;
        voters[msg.sender].vote = candidateIndex;
        candidates[candidateIndex].voteCount++;
    }

    function declareWinner() public view returns (string memory) {
        require(block.timestamp > endTime, "Voting has not yet ended");

        uint256 maxVotes = 0;
        uint256 winnerIndex = 0;

        for (uint256 i = 0; i < candidates.length; i++) {
            if (candidates[i].voteCount > maxVotes) {
                maxVotes = candidates[i].voteCount;
                winnerIndex = i;
            }
        }
        return candidates[winnerIndex].name;
    }    
}
